module servlib.application.Application;import std.outbuffer, std.conv;import std.digest.crc, std.file, std.stdio, std.zip;import servlib.utils.lexer, std.container;import servlib.utils.Singleton;class ApplicationLoader {    void load (string arch) {	Application app = new Application (arch);	app.expand ();    }            private {	this () {}	     }        mixin Singleton!ApplicationLoader;}class Application {    this (string archName) {	if (exists (archName)) {	    	    this.archFile = new ZipArchive (read (archName));	    this.archName = archName;	} else {	    assert (false, "fichier inexistant");	}    }    void expand () {	if (!std.file.exists (ROOTDIR))	    std.file.mkdir (ROOTDIR);	foreach (name, am; archFile.directory) {	    makeDir (ROOTDIR ~ name);	    if (!exists (ROOTDIR ~ name)) {		archFile.expand (am);		std.file.write (ROOTDIR ~ name, am.expandedData);	    }	}    }        private void makeDir (string list) {	string total;	LexerString lexer = new LexerString (list);	lexer.setKeys (make!(Array!string)(["/"]));	Word word;	while (lexer.getNext (word)) {	    total ~= word.str;	    if (word.str == "/") {		if (!exists (total)) {		    std.file.mkdir (total);		}	    }	}    }        override string toString () {		OutBuffer buf = new OutBuffer;	foreach (name, am; archFile.directory) {	    buf.write (name ~ " : ");	    buf.write (to!string (am.expandedSize));	    buf.write ("\n");	}	return buf.toString ();    }        private {	immutable string ROOTDIR = "deploy/";	ZipArchive archFile;	string archName;    }}